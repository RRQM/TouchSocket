<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="reader">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the byteBlock can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UnknownError" xml:space="preserve">
    <value>Unknown error.</value>
  </data>
  <data name="OperationSuccessful" xml:space="preserve">
    <value>Operation successful.</value>
  </data>
  <data name="OperationOvertime" xml:space="preserve">
    <value>Operation timed out.</value>
  </data>
  <data name="OperationCanceled" xml:space="preserve">
    <value>The operation has been canceled.</value>
  </data>
  <data name="ExceptionOccurred" xml:space="preserve">
    <value>An exception occurred with the message '{0}'.</value>
  </data>
  <data name="TokenExisted" xml:space="preserve">
    <value>The token message with '{0}' has been registered.</value>
  </data>
  <data name="MessageNotFound" xml:space="preserve">
    <value>The token message with '{0}' is not registered.</value>
  </data>
  <data name="UnregisteredType" xml:space="preserve">
    <value>Unable to create an instance of unregistered type '{0}'.</value>
  </data>
  <data name="NotFindPublicConstructor" xml:space="preserve">
    <value>No public constructor found for type '{0}'.</value>
  </data>
  <data name="StreamReferencing" xml:space="preserve">
    <value>The stream file corresponding to path '{0}' is still being applied by the '{1}' object.</value>
  </data>
  <data name="StreamNotFind" xml:space="preserve">
    <value>No stream file corresponding to path '{0}' was found.</value>
  </data>
  <data name="FileNotExists" xml:space="preserve">
    <value>The file '{0}' does not exist.</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>Default situation.</value>
  </data>
  <data name="ResultToString" xml:space="preserve">
    <value>Type: {0}, Information: {1}</value>
  </data>
  <data name="ArgumentIsNull" xml:space="preserve">
    <value>The parameter '{0}' is empty.</value>
  </data>
  <data name="MemoryGetArrayFail" xml:space="preserve">
    <value>Buffer backed by array was expected.</value>
  </data>
  <data name="ConfigIsNull" xml:space="preserve">
    <value>The config is empty.</value>
  </data>
  <data name="InvalidParameter" xml:space="preserve">
    <value>The value of parameter '{0}' is an invalid parameter.</value>
  </data>
  <data name="ValueLessThan" xml:space="preserve">
    <value>The value of parameter '{0}' is' {1} ', which is less than' {2} '.</value>
  </data>
  <data name="ValueBetweenAnd" xml:space="preserve">
    <value>The value of parameter '{0}' is' {1} ', which is outside the range of' {2} 'to' {3} '.</value>
  </data>
  <data name="AdapterAlreadyUsed" xml:space="preserve">
    <value>This adapter is already in use by another terminal, please create a new object.</value>
  </data>
  <data name="StringParseToTypeFail" xml:space="preserve">
    <value>Unable to convert string '{0}' to type '{1}'.</value>
  </data>
  <data name="FileOnlyWrittenTo" xml:space="preserve">
    <value>The file at path '{0}' has been loaded in write only mode.</value>
  </data>
  <data name="FileReadOnly" xml:space="preserve">
    <value>The file at path '{0}' has been loaded in read only mode.</value>
  </data>
  <data name="ObjectDisposed" xml:space="preserve">
    <value>The object instance with type '{0}' and HashCode '{1}' has been released.</value>
  </data>
  <data name="BlockReaderNotAllowReading" xml:space="preserve">
    <value>The current byteBlock does not allow reading.</value>
  </data>
  <data name="ValueMoreThan" xml:space="preserve">
    <value>The value of parameter '{0}' is' {1} ', which is greater than' {2} '.</value>
  </data>
  <data name="InvalidEnum" xml:space="preserve">
    <value>For enumeration type: '{0}', an invalid enumeration value '{1}' was set.</value>
  </data>
</root>