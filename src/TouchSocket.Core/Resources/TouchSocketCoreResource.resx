<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="reader">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the byteBlock can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UnknownError" xml:space="preserve">
    <value>未知错误。</value>
    <comment>未知错误。</comment>
  </data>
  <data name="OperationSuccessful" xml:space="preserve">
    <value>操作成功。</value>
    <comment>操作成功。</comment>
  </data>
  <data name="OperationOvertime" xml:space="preserve">
    <value>操作超时。</value>
    <comment>操作超时。</comment>
  </data>
  <data name="OperationCanceled" xml:space="preserve">
    <value>操作已被取消。</value>
    <comment>操作已被取消。</comment>
  </data>
  <data name="ExceptionOccurred" xml:space="preserve">
    <value>发生异常，信息：‘{0}’。</value>
    <comment>发生异常，信息：‘{0}’。</comment>
  </data>
  <data name="TokenExisted" xml:space="preserve">
    <value>Token消息为‘{0}’的已注册。</value>
    <comment>Token消息为‘{0}’的已注册。</comment>
  </data>
  <data name="MessageNotFound" xml:space="preserve">
    <value>Token消息为‘{0}’的未注册。</value>
    <comment>Token消息为‘{0}’的未注册。</comment>
  </data>
  <data name="UnregisteredType" xml:space="preserve">
    <value>无法创建未被注册的类型‘{0}’的实例。</value>
    <comment>无法创建未被注册的类型‘{0}’的实例。</comment>
  </data>
  <data name="NotFindPublicConstructor" xml:space="preserve">
    <value>没有找到类型‘{0}’的公共构造函数。</value>
    <comment>没有找到类型‘{0}’的公共构造函数。</comment>
  </data>
  <data name="StreamReferencing" xml:space="preserve">
    <value>路径‘{0}’对应的流文件，仍然被‘{1}’对象应用。</value>
    <comment>路径‘{0}’对应的流文件，仍然被‘{1}’对象应用。</comment>
  </data>
  <data name="StreamNotFind" xml:space="preserve">
    <value>没有找到路径‘{0}’对应的流文件。</value>
    <comment>没有找到路径‘{0}’对应的流文件。</comment>
  </data>
  <data name="FileNotExists" xml:space="preserve">
    <value>文件‘{0}’不存在。</value>
    <comment>文件‘{0}’不存在。</comment>
  </data>
  <data name="Default" xml:space="preserve">
    <value>默认情况。</value>
    <comment>默认情况。</comment>
  </data>
  <data name="ResultToString" xml:space="preserve">
    <value>类型：{0}，信息：{1}</value>
    <comment>Result结果ToString</comment>
  </data>
  <data name="ArgumentIsNull" xml:space="preserve">
    <value>参数‘{0}’为空。</value>
    <comment>参数‘{0}’为空。</comment>
  </data>
  <data name="ConfigIsNull" xml:space="preserve">
    <value>配置文件为空。</value>
    <comment>配置文件为空。</comment>
  </data>
  <data name="InvalidParameter" xml:space="preserve">
    <value>参数‘{0}’的值是无效参数。</value>
    <comment>参数‘{0}’的值是无效参数。</comment>
  </data>
  <data name="ValueLessThan" xml:space="preserve">
    <value>参数‘{0}’的值为’{1}‘，小于‘{2}’。</value>
    <comment>参数‘{0}’的值为’{1}‘，小于‘{2}’。</comment>
  </data>
  <data name="ValueBetweenAnd" xml:space="preserve">
    <value>参数‘{0}’的值为’{1}‘，超出‘{2}’到‘{3}’的范围。</value>
    <comment>参数‘{0}’的值为’{1}‘，超出‘{2}’到‘{3}’的范围。</comment>
  </data>
  <data name="ValueMoreThan" xml:space="preserve">
    <value>参数‘{0}’的值为’{1}‘，大于‘{2}’。</value>
    <comment>参数‘{0}’的值为’{1}‘，大于‘{2}’。</comment>
  </data>
  <data name="AdapterAlreadyUsed" xml:space="preserve">
    <value>此适配器已被其他终端使用，请重新创建对象。</value>
    <comment>此适配器已被其他终端使用，请重新创建对象。</comment>
  </data>
  <data name="StringParseToTypeFail" xml:space="preserve">
    <value>无法将字符串’{0}‘转为类型’{1}‘。</value>
    <comment>无法将字符串’{0}‘转为类型’{1}‘。</comment>
  </data>
  <data name="MemoryGetArrayFail" xml:space="preserve">
    <value>应为由数组支持的缓冲区。</value>
    <comment>应为由数组支持的缓冲区。</comment>
  </data>
  <data name="FileOnlyWrittenTo" xml:space="preserve">
    <value>该路径’{0}‘的文件已经被加载为仅写入模式。</value>
    <comment>该路径’{0}‘的文件已经被加载为仅写入模式。</comment>
  </data>
  <data name="FileReadOnly" xml:space="preserve">
    <value>该路径’{0}‘的文件已经被加载为仅读取模式。</value>
    <comment>该路径’{0}‘的文件已经被加载为仅读取模式。</comment>
  </data>
  <data name="ObjectDisposed" xml:space="preserve">
    <value>类型为’{0}‘，HashCode为’{1}‘的对象实例已被释放。</value>
    <comment>类型为’{0}‘，HashCode为’{1}‘的对象实例已被释放。</comment>
  </data>
  <data name="BlockReaderNotAllowReading" xml:space="preserve">
    <value>当前读取器不允许读取。</value>
    <comment>当前读取器不允许读取。</comment>
  </data>
  <data name="InvalidEnum" xml:space="preserve">
    <value>对于枚举类型：‘{0}’，设置了无效的枚举值‘{1}’。</value>
    <comment>对于枚举类型：‘{0}’，设置了无效的枚举值‘{1}’。</comment>
  </data>
</root>