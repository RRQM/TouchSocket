<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="reader">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the byteBlock can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClientNotFind" xml:space="preserve">
    <value>没有找到Id为‘{0}’的客户端。</value>
    <comment>没有找到Id为‘{0}’的客户端。</comment>
  </data>
  <data name="ClientNotConnected" xml:space="preserve">
    <value>客户端没有连接。</value>
    <comment>客户端没有连接。</comment>
  </data>
  <data name="UnableToObtainEndpoint" xml:space="preserve">
    <value>无法获取终结点。</value>
    <comment>无法获取终结点。</comment>
  </data>
  <data name="SocketHaveToConnected" xml:space="preserve">
    <value>新的Socket必须在连接状态。</value>
    <comment>新的Socket必须在连接状态。</comment>
  </data>
  <data name="IncompleteDataTransmission" xml:space="preserve">
    <value>发送数据不完全。</value>
    <comment>发送数据不完全。</comment>
  </data>
  <data name="DisposeClose" xml:space="preserve">
    <value>调用Dispose主动断开。</value>
    <comment>调用Dispose主动断开。</comment>
  </data>
  <data name="RemoteDisconnects" xml:space="preserve">
    <value>远程终端主动断开。</value>
    <comment>远程终端主动断开。</comment>
  </data>
  <data name="CannotSendRequestInfo" xml:space="preserve">
    <value>当前适配器为空或者不支持对象（IRequestInfo）发送。</value>
    <comment>当前适配器为空或者不支持对象（IRequestInfo）发送。</comment>
  </data>
  <data name="ConnectedMaximum" xml:space="preserve">
    <value>已连接的客户端数量已达到设定（{0}）最大值。</value>
    <comment>已连接的客户端数量已达到设定（{0}）最大值。</comment>
  </data>
  <data name="IdAlreadyExists" xml:space="preserve">
    <value>Id为‘{0}’的客户端已存在。</value>
    <comment>Id为‘{0}’的客户端已存在。</comment>
  </data>
  <data name="UdpStopped" xml:space="preserve">
    <value>Udp不在运行状态。</value>
    <comment>Udp不在运行状态。</comment>
  </data>
  <data name="TimedoutWithoutReceiving" xml:space="preserve">
    <value>超时无数据Receive交互，主动断开连接。</value>
    <comment>超时无数据Receive交互，主动断开连接。</comment>
  </data>
  <data name="TimedoutWithoutSending" xml:space="preserve">
    <value>超时无数据Send交互，主动断开连接。</value>
    <comment>超时无数据Send交互，主动断开连接。</comment>
  </data>
  <data name="TimedoutWithoutAll" xml:space="preserve">
    <value>超时无数据交互，主动断开连接。</value>
    <comment>超时无数据交互，主动断开连接。</comment>
  </data>
</root>