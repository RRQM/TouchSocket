"use strict";(self.webpackChunktouchsocket=self.webpackChunktouchsocket||[]).push([[2757],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>c});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var d=r.createContext({}),i=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},l=function(e){var n=i(e.components);return r.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,d=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),y=i(t),c=s,p=y["".concat(d,".").concat(c)]||y[c]||m[c]||a;return t?r.createElement(p,u(u({ref:n},l),{},{components:t})):r.createElement(p,u({ref:n},l))}));function c(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,u=new Array(a);u[0]=y;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:s,u[1]=o;for(var i=2;i<a;i++)u[i]=t[i];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7769:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>i});var r=t(7462),s=(t(7294),t(3905));const a={id:"adaptermodbus",title:"Modbus\u534f\u8bae"},u=void 0,o={unversionedId:"adaptermodbus",id:"adaptermodbus",title:"Modbus\u534f\u8bae",description:"\u8bf4\u660e",source:"@site/docs/adaptermodbus.mdx",sourceDirName:".",slug:"/adaptermodbus",permalink:"/touchsocket/docs/adaptermodbus",draft:!1,editUrl:"https://gitee.com/rrqm_home/touchsocket/tree/master/handbook/docs/adaptermodbus.mdx",tags:[],version:"current",lastUpdatedBy:"Kimdiego2098",lastUpdatedAt:1691993379,formattedLastUpdatedAt:"Aug 14, 2023",frontMatter:{id:"adaptermodbus",title:"Modbus\u534f\u8bae"},sidebar:"docs",previous:{title:"\u56fd\u7f51\u8f93\u7535i1\u6807\u51c6\u7248",permalink:"/touchsocket/docs/stategridtransmission"},next:{title:"\u897f\u95e8\u5b50S7\u534f\u8bae",permalink:"/touchsocket/docs/adaptersiemenss7"}},d={},i=[{value:"\u8bf4\u660e",id:"\u8bf4\u660e",level:2},{value:"\u7248\u6743",id:"\u7248\u6743",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:2}],l={toc:i};function m(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"\u8bf4\u660e"},"\u8bf4\u660e"),(0,s.kt)("p",null,"\u672c\u4ee3\u7801\u4ec5\u9002\u7528\u4ee5\u4e0b\u534f\u8bae\u3002"),(0,s.kt)("p",null,"Modbus Tcp/Modbus Rtu"),(0,s.kt)("p",null,"ModbusRtu\u540c\u65f6\u652f\u6301Tcp/Udp\u94fe\u8def"),(0,s.kt)("admonition",{title:"\u63d0\u793a",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"\u5c01\u88c5\u8f83\u591a\uff0c\u4ee5\u4e0b\u4ee3\u7801\u53ea\u6458\u5f55\u90e8\u5206\uff0c\u5982\u679c\u9700\u8981\u5168\u90e8\u4ee3\u7801\uff0c\u8bf7\u67e5\u770b",(0,s.kt)("a",{parentName:"p",href:"https://gitee.com/diego2098/ThingsGateway"},"\u5f00\u6e90\u5730\u5740"))),(0,s.kt)("h2",{id:"\u7248\u6743"},"\u7248\u6743"),(0,s.kt)("p",null,"\u8be5\u4ee3\u7801\u6240\u6709\u7248\u6743\u5f52Diego\u6240\u6709\uff0c\u4f7f\u7528\u65f6\u8bf7\u52a1\u5fc5\u6ce8\u660e\u3002"),(0,s.kt)("h2",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using ThingsGateway.Foundation.Extension.Generic;\n\nnamespace ThingsGateway.Foundation.Adapter.Modbus;\n\n/// <summary>\n/// ModbusTcpDataHandleAdapter\n/// </summary>\npublic class ModbusTcpDataHandleAdapter : ReadWriteDevicesTcpDataHandleAdapter<ModbusTcpMessage>\n{\n    private readonly EasyIncrementCount easyIncrementCount = new(ushort.MaxValue);\n\n    /// <summary>\n    /// \u68c0\u6d4b\u4e8b\u52a1\u6807\u8bc6\u7b26\n    /// </summary>\n    public bool IsCheckMessageId\n    {\n        get\n        {\n            return Request?.IsCheckMessageId ?? false;\n        }\n        set\n        {\n            Request.IsCheckMessageId = value;\n        }\n    }\n\n    /// <inheritdoc/>\n    public override byte[] PackCommand(byte[] command)\n    {\n        return ModbusHelper.AddModbusTcpHead(command, (ushort)easyIncrementCount.GetCurrentValue());\n    }\n\n    /// <inheritdoc/>\n    protected override ModbusTcpMessage GetInstance()\n    {\n        return new ModbusTcpMessage();\n    }\n\n    /// <inheritdoc/>\n    protected override FilterResult UnpackResponse(ModbusTcpMessage request, byte[] send, byte[] body, byte[] response)\n    {\n        //\u7406\u60f3\u72b6\u6001\u68c0\u6d4b\n        var result = ModbusHelper.GetModbusData(send.RemoveBegin(6), response.RemoveBegin(6));\n        if (result.IsSuccess)\n        {\n            request.ResultCode = result.ResultCode;\n            request.Message = result.Message;\n            request.Content = result.Content1;\n        }\n        else\n        {\n            request.ResultCode = result.ResultCode;\n            request.Message = result.Message;\n        }\n        return result.Content2;\n\n    }\n}\n\n\n\nusing System.Text;\n\nusing ThingsGateway.Foundation.Extension.Bool;\nusing ThingsGateway.Foundation.Extension.Byte;\nusing ThingsGateway.Foundation.Extension.Generic;\n\nnamespace ThingsGateway.Foundation.Adapter.Modbus;\n\ninternal class ModbusHelper\n{\n    /// <summary>\n    /// \u6dfb\u52a0Crc16\n    /// </summary>\n    internal static byte[] AddCrc(byte[] command)\n    {\n        return EasyCRC16.CRC16(command);\n    }\n\n    /// <summary>\n    /// \u6dfb\u52a0ModbusTcp\u62a5\u6587\u5934\n    /// </summary>\n    internal static byte[] AddModbusTcpHead(byte[] modbus, ushort id)\n    {\n        byte[] tcp = new byte[modbus.Length + 6];\n        tcp[0] = BitConverter.GetBytes(id)[1];\n        tcp[1] = BitConverter.GetBytes(id)[0];\n        tcp[4] = BitConverter.GetBytes(modbus.Length)[1];\n        tcp[5] = BitConverter.GetBytes(modbus.Length)[0];\n        modbus.CopyTo(tcp, 6);\n        return tcp;\n    }\n\n    /// <summary>\n    /// modbus\u5730\u5740\u683c\u5f0f\u8bf4\u660e\n    /// </summary>\n    /// <returns></returns>\n    internal static string GetAddressDescription()\n    {\n        StringBuilder stringBuilder = new();\n        stringBuilder.AppendLine("Modbus\u5bc4\u5b58\u5668");\n        stringBuilder.AppendLine("\u7ebf\u5708\u5bc4\u5b58\u5668\u4f7f\u7528\u4ece 00001 \u5f00\u59cb\u7684\u5730\u5740\u7f16\u53f7\u3002");\n        stringBuilder.AppendLine("\u79bb\u6563\u8f93\u5165\u5bc4\u5b58\u5668\u4f7f\u7528\u4ece 10001 \u5f00\u59cb\u7684\u5730\u5740\u7f16\u53f7\u3002");\n        stringBuilder.AppendLine("\u8f93\u5165\u5bc4\u5b58\u5668\u4f7f\u7528\u4ece 30001 \u5f00\u59cb\u7684\u5730\u5740\u7f16\u53f7\u3002");\n        stringBuilder.AppendLine("\u4fdd\u6301\u5bc4\u5b58\u5668\u4f7f\u7528\u4ece 40001 \u5f00\u59cb\u7684\u5730\u5740\u7f16\u53f7\u3002");\n        stringBuilder.AppendLine("\u4e3e\u4f8b\uff1a");\n        stringBuilder.AppendLine("40001=>\u4fdd\u6301\u5bc4\u5b58\u5668\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668");\n        stringBuilder.AppendLine("\u989d\u5916\u683c\u5f0f\uff1a");\n        stringBuilder.AppendLine("\u8bbe\u5907\u7ad9\u53f7 \uff0c\u6bd4\u598240001;s=2; \uff0c\u4ee3\u8868\u8bbe\u5907\u5730\u5740\u4e3a2\u7684\u4fdd\u6301\u5bc4\u5b58\u5668\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668");\n        stringBuilder.AppendLine("\u5199\u5165\u529f\u80fd\u7801 \uff0c\u6bd4\u598240001;w=16; \uff0c\u4ee3\u8868\u4fdd\u6301\u5bc4\u5b58\u5668\u7b2c\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u5199\u5165\u503c\u65f6\u91c7\u75280x10\u529f\u80fd\u7801\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u76840x06\u529f\u80fd\u7801");\n        return stringBuilder.ToString();\n    }\n    /// <summary>\n    /// \u901a\u8fc7\u9519\u8bef\u7801\u6765\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u6587\u672c\u6d88\u606f\n    /// </summary>\n    internal static string GetDescriptionByErrorCode(byte code)\n    {\n        return code switch\n        {\n            1 => "\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7801",\n            2 => "\u8bfb\u53d6\u5bc4\u5b58\u5668\u8d8a\u754c",\n            3 => "\u8bfb\u53d6\u957f\u5ea6\u8d85\u9650",\n            4 => "\u8bfb\u5199\u5f02\u5e38",\n            _ => "\u672a\u77e5\u9519\u8bef",\n        };\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6modbus\u6570\u636e\u533a\u5185\u5bb9\uff0c\u8fd4\u56de\u6570\u636e\u9700\u53bb\u9664Crc\u548c\u62a5\u6587\u5934\uff0c\u4f8b\u5982\uff1a01 03 02 00 01\uff0c\u53d1\u9001\u6570\u636e\u9700\u62a5\u6587\u5934\n    /// </summary>\n    /// <param name="send">\u53d1\u9001\u6570\u636e</param>\n    /// <param name="response">\u8fd4\u56de\u6570\u636e</param>\n    /// <returns></returns>\n    internal static OperResult<byte[], FilterResult> GetModbusData(byte[] send, byte[] response)\n    {\n        try\n        {\n            if (response.Length < 3)\n                return new OperResult<byte[], FilterResult>("\u6570\u636e\u957f\u5ea6\u4e0d\u8db3" + response.ToHexString()) { Content2 = FilterResult.Cache };\n\n\n            if (response[1] >= 0x80)//\u9519\u8bef\u7801\n                return new OperResult<byte[], FilterResult>(GetDescriptionByErrorCode(response[2])) { Content2 = FilterResult.Success };\n            if ((response.Length < response[2] + 3))\n                return new OperResult<byte[], FilterResult>("\u6570\u636e\u957f\u5ea6\u4e0d\u8db3" + response.ToHexString()) { Content2 = FilterResult.Cache };\n\n\n            if (send.Length == 0)\n            {\n                var result = OperResult.CreateSuccessResult(GenericExtensions.ArrayRemoveBegin(response, 3), FilterResult.Success);\n                result.Message = "\u63a5\u6536\u6570\u636e\u6b63\u786e\uff0c\u4f46\u4e3b\u673a\u5e76\u6ca1\u6709\u4e3b\u52a8\u8bf7\u6c42\u6570\u636e";\n                return result;\n            }\n            if (send[0] != response[0])\n                return new OperResult<byte[], FilterResult>(string.Format("\u7ad9\u53f7\u4e0d\u4e00\u81f4", send[0], response[0])) { Content2 = FilterResult.Success };\n            if (send[1] != response[1])\n                return new OperResult<byte[], FilterResult>() { Message = "\u529f\u80fd\u7801\u4e0d\u4e00\u81f4", Content2 = FilterResult.Success };\n            return OperResult.CreateSuccessResult(GenericExtensions.ArrayRemoveBegin(response, 3), FilterResult.Success);\n        }\n        catch (Exception ex)\n        {\n            return new OperResult<byte[], FilterResult>(ex.Message) { Content2 = FilterResult.Success };\n        }\n    }\n    /// <summary>\n    /// \u53bb\u9664Crc\uff0c\u8fd4\u56demodbus\u6570\u636e\u533a\n    /// </summary>\n    /// <param name="send"></param>\n    /// <param name="response"></param>\n    /// <param name="crcCheck"></param>\n    /// <returns></returns>\n    internal static OperResult<byte[], FilterResult> GetModbusRtuData(byte[] send, byte[] response, bool crcCheck = true)\n    {\n        if (response.Length < 3)\n            return new OperResult<byte[], FilterResult>("\u6570\u636e\u957f\u5ea6\u4e0d\u8db3" + response.ToHexString()) { Content2 = FilterResult.Cache };\n\n        if (crcCheck && !EasyCRC16.CheckCRC16(response))\n            return new OperResult<byte[], FilterResult>("Crc\u6821\u9a8c\u5931\u8d25" + DataTransUtil.ByteToHexString(response, \' \')) { Content2 = FilterResult.Success };\n        return GetModbusData(send, response.RemoveLast(2));\n    }\n    /// <summary>\n    /// \u83b7\u53d6\u8bfb\u53d6\u62a5\u6587\n    /// </summary>\n    internal static OperResult<byte[]> GetReadModbusCommand(string address, int length, byte station)\n    {\n        try\n        {\n            ModbusAddress mAddress = new(address, station);\n            return GetReadModbusCommand(mAddress, length);\n        }\n        catch (Exception ex)\n        {\n            return new OperResult<byte[]>(ex.Message);\n        }\n    }\n    /// <summary>\n    /// \u83b7\u53d6\u5199\u5165\u5e03\u5c14\u91cf\u62a5\u6587\uff0c\u6839\u636e\u5730\u5740\u8bc6\u522b\u529f\u80fd\u7801\n    /// </summary>\n    internal static OperResult<byte[]> GetWriteBoolModbusCommand(string address, bool[] values, byte station)\n    {\n        try\n        {\n            ModbusAddress mAddress = new(address, station);\n            //\u529f\u80fd\u7801\u6216\u5b9e\u9645\u957f\u5ea6\n            if (values?.Length > 1 || mAddress.WriteFunction == 15)\n                return GetWriteBoolModbusCommand(mAddress, values, values.Length);\n            else\n                return GetWriteBoolModbusCommand(address, values[0], station);\n        }\n        catch (Exception ex)\n        {\n            return new OperResult<byte[]>(ex.Message);\n        }\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u5199\u5165\u5b57\u62a5\u6587\uff0c\u6839\u636e\u5730\u5740\u8bc6\u522b\u529f\u80fd\u7801\n    /// </summary>\n    internal static OperResult<byte[]> GetWriteModbusCommand(string address, byte[] value, byte station)\n    {\n        try\n        {\n            ModbusAddress mAddress = new(address, station);\n            //\u529f\u80fd\u7801\u6216\u5b9e\u9645\u957f\u5ea6\n            if (value?.Length > 2 || mAddress.WriteFunction == 16)\n                return GetWriteModbusCommand(mAddress, value);\n            else\n                return GetWriteOneModbusCommand(mAddress, value);\n\n        }\n        catch (Exception ex)\n        {\n            return new OperResult<byte[]>(ex.Message);\n        }\n    }\n    /// <summary>\n    /// \u83b7\u53d6\u8bfb\u53d6\u62a5\u6587\n    /// </summary>\n    private static OperResult<byte[]> GetReadModbusCommand(ModbusAddress mAddress, int length)\n    {\n        byte[] array = new byte[6]\n        {\n        (byte) mAddress.Station,\n        (byte) mAddress.ReadFunction,\n        BitConverter.GetBytes(mAddress.AddressStart)[1],\n        BitConverter.GetBytes(mAddress.AddressStart)[0],\n        BitConverter.GetBytes(length)[1],\n        BitConverter.GetBytes(length)[0]\n        };\n\n        return OperResult.CreateSuccessResult(array);\n    }\n\n    /// <summary>\n    /// \u83b7\u53d605\u5199\u5165\u5e03\u5c14\u91cf\u62a5\u6587\n    /// </summary>\n    private static OperResult<byte[]> GetWriteBoolModbusCommand(string address, bool value, byte station)\n    {\n        try\n        {\n            if (address.IndexOf(\'.\') <= 0)\n            {\n                ModbusAddress mAddress = new(address, station);\n                return GetWriteBoolModbusCommand(mAddress, value);\n            }\n            return new("\u4e0d\u652f\u6301\u5199\u5165\u5b57\u5bc4\u5b58\u5668\u7684\u67d0\u4e00\u4f4d");\n        }\n        catch (Exception ex)\n        {\n            return new OperResult<byte[]>(ex.Message);\n        }\n    }\n\n    /// <summary>\n    /// \u83b7\u53d605\u5199\u5165\u5e03\u5c14\u91cf\u62a5\u6587\n    /// </summary>\n    private static OperResult<byte[]> GetWriteBoolModbusCommand(ModbusAddress mAddress, bool value)\n    {\n        byte[] array = new byte[6]\n        {\n    (byte) mAddress.Station,\n    (byte)5,\n    BitConverter.GetBytes(mAddress.AddressStart)[1],\n    BitConverter.GetBytes(mAddress.AddressStart)[0],\n     0,\n     0\n        };\n        if (value)\n        {\n            array[4] = 0xFF;\n            array[5] = 0;\n        }\n        else\n        {\n            array[4] = 0;\n            array[5] = 0;\n        }\n        return OperResult.CreateSuccessResult(array);\n    }\n\n    /// <summary>\n    /// \u83b7\u53d615\u5199\u5165\u5e03\u5c14\u91cf\u62a5\u6587\n    /// </summary>\n    private static OperResult<byte[]> GetWriteBoolModbusCommand(ModbusAddress mAddress, bool[] values, int length)\n    {\n        try\n        {\n            byte[] numArray1 = values.BoolArrayToByte();\n            byte[] numArray2 = new byte[7 + numArray1.Length];\n            numArray2[0] = (byte)mAddress.Station;\n            numArray2[1] = (byte)15;\n            numArray2[2] = BitConverter.GetBytes(mAddress.AddressStart)[1];\n            numArray2[3] = BitConverter.GetBytes(mAddress.AddressStart)[0];\n            numArray2[4] = (byte)(length / 256);\n            numArray2[5] = (byte)(length % 256);\n            numArray2[6] = (byte)numArray1.Length;\n            numArray1.CopyTo(numArray2, 7);\n            return OperResult.CreateSuccessResult(numArray2);\n        }\n        catch (Exception ex)\n        {\n            return new OperResult<byte[]>(ex.Message);\n        }\n    }\n\n    /// <summary>\n    /// \u83b7\u53d616\u5199\u5165\u5b57\u62a5\u6587\n    /// </summary>\n    private static OperResult<byte[]> GetWriteModbusCommand(ModbusAddress mAddress, byte[] values)\n    {\n        byte[] numArray = new byte[7 + values.Length];\n        numArray[0] = (byte)mAddress.Station;\n        numArray[1] = (byte)16;\n        numArray[2] = BitConverter.GetBytes(mAddress.AddressStart)[1];\n        numArray[3] = BitConverter.GetBytes(mAddress.AddressStart)[0];\n        numArray[4] = (byte)(values.Length / 2 / 256);\n        numArray[5] = (byte)(values.Length / 2 % 256);\n        numArray[6] = (byte)values.Length;\n        values.CopyTo(numArray, 7);\n        return OperResult.CreateSuccessResult(numArray);\n\n    }\n\n    /// <summary>\n    /// \u83b7\u53d66\u5199\u5165\u5b57\u62a5\u6587\n    /// </summary>\n    private static OperResult<byte[]> GetWriteOneModbusCommand(ModbusAddress mAddress, byte[] values)\n    {\n        byte[] numArray = new byte[4 + values.Length];\n        numArray[0] = (byte)mAddress.Station;\n        numArray[1] = (byte)6;\n        numArray[2] = BitConverter.GetBytes(mAddress.AddressStart)[1];\n        numArray[3] = BitConverter.GetBytes(mAddress.AddressStart)[0];\n        values.CopyTo(numArray, 4);\n        return OperResult.CreateSuccessResult(numArray);\n    }\n\n}\n\n\n')))}m.isMDXComponent=!0}}]);