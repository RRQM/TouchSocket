<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentNull" xml:space="preserve">
    <value>参数‘{0}’为空。</value>
  </data>
  <data name="Canceled" xml:space="preserve">
    <value>取消操作</value>
  </data>
  <data name="CreateWriteStreamFail" xml:space="preserve">
    <value>从‘{0}’创建写入流失败，信息：{1}。</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>默认设置值。</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>发生未知错误。</value>
  </data>
  <data name="Exception" xml:space="preserve">
    <value>其他异常消息。</value>
  </data>
  <data name="FileExists" xml:space="preserve">
    <value>文件‘{0}’已存在。</value>
  </data>
  <data name="GetEventArgsFail" xml:space="preserve">
    <value>事件操作器异常。</value>
  </data>
  <data name="LoadStreamFail" xml:space="preserve">
    <value>从‘{0}’路径加载流异常。</value>
  </data>
  <data name="NoResponse" xml:space="preserve">
    <value>长时间没有响应。</value>
  </data>
  <data name="NotFindStream" xml:space="preserve">
    <value>没有找到路径‘{0}’对应的流文件。</value>
  </data>
  <data name="Overtime" xml:space="preserve">
    <value>操作超时</value>
  </data>
  <data name="PathInvalid" xml:space="preserve">
    <value>参数‘{0}’设置的路径‘{1}’不合法。</value>
  </data>
  <data name="RemoteException" xml:space="preserve">
    <value>远程终端异常，信息：{0}。</value>
  </data>
  <data name="RemoteFileNotExists" xml:space="preserve">
    <value>远程文件‘{0}’不存在。</value>
  </data>
  <data name="RemoteNotSupported" xml:space="preserve">
    <value>远程终端不支持响应该操作。</value>
  </data>
  <data name="RemoteRefuse" xml:space="preserve">
    <value>远程终端拒绝该操作，反馈信息：{0}。</value>
  </data>
  <data name="SetChannelFail" xml:space="preserve">
    <value>通道设置失败。</value>
  </data>
  <data name="StreamBucketNull" xml:space="preserve">
    <value>接收流容器为空。</value>
  </data>
  <data name="StreamReferencing" xml:space="preserve">
    <value>路径‘{0}’对应的流文件，仍然被‘{1}’对象应用。</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>操作成功。</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>未知原因。</value>
  </data>
</root>